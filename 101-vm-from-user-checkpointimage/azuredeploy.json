{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminPassword": {
      "metadata": {
        "description": "Administrator password"
      },
      "type": "securestring"
    },
    "authenticationType": {
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "defaultValue": "password",
      "metadata": {
        "description": "Authentication type"
      },
      "type": "string"
    },
    ////////////////////////////////
    //Azure China 并未将来自Check Point的镜像作为一个平台的镜像使用，因此无法通过Offer 获得镜像文件。因此只能通过直接指定镜像
    //文件URI的方式来创建虚拟机，所以请删除以下注释掉的参数，并添加两个参数：userImageStorageAccountName和osDiskVhdUri
    ///////////////////////////////
    /*"newStorageAccountName": {
      "metadata": {
        "description": "Name of storage account"
      },
       "type": "string"
    },
    "offer": {
      "allowedValues": [
        "R7730BYOL",
        "R7730PAYG"
      ],
      "defaultValue": "R7730BYOL",
      "metadata": {
        "description": "Offer version and type"
      },
      "type": "string"
    },*/
    "userImageStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of the your storage account"
      }
    },
    "osDiskVhdUri": {
      "type": "string",
      "metadata": {
        "description": "Uri of the your user image"
      }
    },
    "sshPublicKey": {
      "defaultValue": "",
      "metadata": {
        "description": "Administrator SSH public key"
      },
      "type": "string"
    },
    "vmName": {
      "metadata": {
        "description": "Name of the Security Gateway"
      },
      "type": "string"
    },
    "vmSize": {
      "defaultValue": "Standard_D3",
      "allowedValues": [
        "Standard_A4",
        "Standard_A7",
        "Standard_A9",
        "Standard_A11",
        "Standard_D3",
        "Standard_D4",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2"
      ],
      "metadata": {
        "description": "Size of the VM"
      },
      "type": "string"
    },
    "installSecurityGateway": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Install Security Gateway"
      }
    },
    "installSecurityManagement": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Install Security Management"
      }
    },
    "managementGUIClientNetwork": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "Allowed network for Management GUI clients",
        "minLength": 9,
        "maxLength": 18
      }
    },
    "sicKey": {
      "type": "securestring",
      "metadata": {
        "description": "One time key for Secure Internal Communication",
        "minLength": 8
      }
    }
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "customData": "[concat('#!/bin/bash\n', '\n', 'installSecurityGateway=\"', parameters('installSecurityGateway'), '\"', '\n', 'installSecurityGateway=\"$(echo $installSecurityGateway | tr \"TF\" \"tf\")\"\n', 'installSecurityManagement=\"', parameters('installSecurityManagement'), '\"', '\n', 'installSecurityManagement=\"$(echo $installSecurityManagement | tr \"TF\" \"tf\")\"\n', 'adminPassword=\"', parameters('adminPassword'), '\"', '\n', 'managementGUIClientNetwork=\"', parameters('managementGUIClientNetwork'), '\"', '\n', 'ManagementGUIClientBase=\"$(echo $managementGUIClientNetwork | cut -d / -f 1)\"\n', 'ManagementGUIClientMaskLength=\"$(echo $managementGUIClientNetwork | cut -d / -f 2)\"\n', 'sicKey=\"', parameters('sicKey'), '\"', '\n', 'conf=\"install_security_gw=$installSecurityGateway\"\n', 'if $installSecurityGateway; then\n', '    conf=\"${conf}&install_ppak=true\"\n', '    conf=\"${conf}&gateway_cluster_member=false\"\n', 'fi\n', 'conf=\"${conf}&install_security_managment=$installSecurityManagement\"\n', 'if $installSecurityManagement; then\n', '    conf=\"${conf}&install_mgmt_primary=true\"\n', '    conf=\"${conf}&mgmt_admin_name=admin\"\n', '    conf=\"${conf}&mgmt_admin_passwd=$adminPassword\"\n', '    conf=\"${conf}&mgmt_gui_clients_radio=network\"\n', '    conf=\"${conf}&mgmt_gui_clients_ip_field=$ManagementGUIClientBase\"\n', '    conf=\"${conf}&mgmt_gui_clients_subnet_field=$ManagementGUIClientMaskLength\"\n', 'fi\n', 'conf=\"${conf}&ftw_sic_key=$sicKey\"\n', '\n', 'config_system -s $conf\n', 'shutdown -r now\n')]",
    /////////////////////
    //同上解释，也请注释掉一下行
    ////////////////////
    /*"imageOffer": "check-point-r77-10",
    "imagePublisher": "checkpoint",
    "imageReference": "[variables(concat('imageReference', parameters('offer')))]",
    "imageReferenceR7730BYOL": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-byol",
      "version": "latest"
    },
    "imageReferenceR7730PAYG": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp",
      "version": "latest"
    },*/
    //////////////////////////
    //由于提供的镜像均为Linux系统，因此添加这个参数
    /////////////////////////
    "osType":"Linux",
    "lbId": "[resourceId('Microsoft.Network/loadBalancers', variables('lbName'))]",
    "lbName": "frontend-lb",
    "nic1Name": "external",
    "nic2Name": "int0",
    "nic3Name": "int1",
    "osProfile": "[variables(concat('osprofile', parameters('authenticationType')))]",
    "osProfilepassword": {
      "adminPassword": "[parameters('adminPassword')]",
      "adminUsername": "notused",
      "computerName": "[parameters('vmName')]",
      "customData": "[base64(variables('customData'))]"
    },
    "osProfilesshPublicKey": {
      "adminUsername": "notused",
      "computerName": "[parameters('vmName')]",
      "customData": "[base64(variables('customData'))]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": "true",
        "ssh": {
          "publicKeys": [
            {
              "keyData": "[parameters('sshPublicKey')]",
              "path": "/home/notused/.ssh/authorized_keys"
            }
          ]
        }
      }
    },
    ///////////////////////////////
    //由于Plan参数是一个描述用于通过Azure MarketPlace中部署镜像方式，但目前这个参数不适合使用直接通过Image部署的场景，因此以下
    //各行去掉
    ///////////////////////////////
    /*"plan": "[variables(concat('plan', parameters('offer')))]",
    "planR7730BYOL": {
      "name": "sg-byol",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planR7730PAYG": {
      "name": "sg-ngtp",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },*/
    "storageAccountType": "Standard_LRS",
    "osDiskVhdName": "[concat('http://',parameters('userImageStorageAccountName'),'.blob.core.chinacloudapi.cn/vhds/',parameters('vmName'),'osDisk.vhd')]",
    "vnetName": "vnet",
    "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Frontend",
    "subnet1Prefix": "10.0.1.0/24",
    "subnet1Id": "[concat(variables('vnetId'), '/subnets/', variables('subnet1Name'))]",
    "subnet2Name": "Web",
    "subnet2Prefix": "10.0.2.0/24",
    "subnet2Id": "[concat(variables('vnetId'), '/subnets/', variables('subnet2Name'))]",
    "subnet3Name": "App",
    "subnet3Prefix": "10.0.3.0/24",
    "subnet3Id": "[concat(variables('vnetId'), '/subnets/', variables('subnet3Name'))]",
    "externalPrivateAddress": "10.0.1.10",
    "subnet2PrivateAddress": "10.0.2.10",
    "subnet3PrivateAddress": "10.0.3.10",
    "frontendRouteTableId": "[resourceId('Microsoft.Network/routeTables', variables('subnet1Name'))]",
    "subnet2RouteTableId": "[resourceId('Microsoft.Network/routeTables', variables('subnet2Name'))]",
    "subnet3RouteTableId": "[resourceId('Microsoft.Network/routeTables', variables('subnet3Name'))]",
    "publicIPAddressName": "gateway",
    "publicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
    "webApps": [
      "[concat('webapp', parameters('vmName'), '1')]",
      "[concat('webapp', parameters('vmName'), '2')]"
    ],
    "publicIPAddressWebApp1Id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('webApps')[0])]",
    "publicIPAddressWebApp2Id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('webApps')[1])]",
    "WebApp1IPConfigId": "[concat(variables('lbId'), '/frontendIPConfigurations/WebApp1FrontEnd')]",
    "WebApp2IPConfigId": "[concat(variables('lbId'), '/frontendIPConfigurations/WebApp2FrontEnd')]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('subnet1Name')]",
      "properties": {
        "routes": [
          {
            "name": "Local-Subnet",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "To-Internal",
            "properties": {
              "addressPrefix": "[variables('addressPrefix')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('externalPrivateAddress')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('subnet2Name')]",
      "properties": {
        "routes": [
          {
            "name": "Local-Subnet",
            "properties": {
              "addressPrefix": "[variables('subnet2Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Inside-Vnet",
            "properties": {
              "addressPrefix": "[variables('addressPrefix')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('subnet2PrivateAddress')]"
            }
          },
          {
            "name": "To-Internet",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('subnet2PrivateAddress')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('subnet3Name')]",
      "properties": {
        "routes": [
          {
            "name": "Local-Subnet",
            "properties": {
              "addressPrefix": "[variables('subnet3Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Inside-Vnet",
            "properties": {
              "addressPrefix": "[variables('addressPrefix')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('subnet3PrivateAddress')]"
            }
          },
          {
            "name": "To-Internet",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('subnet3PrivateAddress')]"
            }
          }
        ]
      }
    },
   //////////////////////////////////////
   //通过镜像文件部署，需要满足镜像文件与所创建的虚拟机必须在同一存储账号下的限制，因此此处无需也不能创建一个新的存储账号，
   //需要提前创建好一个存储账号，并将镜像文件COPY到该存储账号下，前面的userImageStorageAccountName和osDiskVhdUri就定位了
   //一个已有的存储账号
   /////////////////////////////////////
   /* {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('newStorageAccountName')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },*/
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('vnetName')]",
      "dependsOn": [
        "[variables('frontendRouteTableId')]",
        "[variables('subnet2RouteTableId')]",
        "[variables('subnet3RouteTableId')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]",
              "routeTable": {
                "id": "[variables('frontendRouteTableId')]"
              }
            }
          },
          {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet2Prefix')]",
              "routeTable": {
                "id": "[variables('subnet2RouteTableId')]"
              }
            }
          },
          {
            "name": "[variables('subnet3Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet3Prefix')]",
              "routeTable": {
                "id": "[variables('subnet3RouteTableId')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('publicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[parameters('vmName')]"
        },
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('webApps')[0]]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('webApps')[0]]"
        },
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('webApps')[1]]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('webApps')[1]]"
        },
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[variables('publicIPAddressWebApp1Id')]",
        "[variables('publicIPAddressWebApp2Id')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('lbName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "WebApp1FrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressWebApp1Id')]"
              }
            }
          },
          {
            "name": "WebApp2FrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressWebApp2Id')]"
              }
            }
          }
        ],
        "inboundNatRules": [
          ///////////////////////////////////
          //添加22端口，便于管理虚拟机
          ///////////////////////////////////
          {                                                    
            "name": "checkpoint-SSH1",
            "properties": {
            "backendPort": 22,
            "frontendIPConfiguration": {
            "id": "[variables('WebApp1IPConfigId')]"
               },
                "frontendPort": 22,
                "protocol": "tcp"
               }
          },
          {
            "name": "[variables('webApps')[0]]",
            "properties": {
              "backendPort": 8081,
              "frontendIPConfiguration": {
                "id": "[variables('WebApp1IPConfigId')]"
              },
              "frontendPort": 80,
              "protocol": "tcp"
            }
          },
          {
            "name": "[variables('webApps')[1]]",
            "properties": {
              "backendPort": 8082,
              "frontendIPConfiguration": {
                "id": "[variables('WebApp2IPConfigId')]"
              },
              "frontendPort": 80,
              "protocol": "tcp"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[variables('vnetId')]",
        "[variables('lbId')]",
        "[variables('publicIPAddressId')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('nic1Name')]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('externalPrivateAddress')]",
              "privateIPAllocationMethod": "Static",
              "PublicIpAddress": {
                "Id": "[variables('publicIPAddressId')]"
              },
              "subnet": {
                "id": "[variables('subnet1Id')]"
              },
              "loadBalancerInboundNatRules": [
                //////////////////////////////
                //添加SSH的入站规则
                /////////////////////////////
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-SSH1')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/', variables('webApps')[0])]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/', variables('webApps')[1])]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[variables('vnetId')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('nic2Name')]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig2",
            "properties": {
              "privateIPAddress": "[variables('subnet2PrivateAddress')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[variables('vnetId')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('nic3Name')]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig3",
            "properties": {
              "privateIPAddress": "[variables('subnet3PrivateAddress')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet3Id')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        ///////////////////////////////
        // 由于已经指定存储账号，无需绑定新的存储账号
        //////////////////////////////
        //"[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nic1Name'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nic2Name'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nic3Name'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[parameters('vmName')]",
      //////////////////////////////
      // 解释见上文
      //////////////////////////////
      //"plan": "[variables('plan')]",
      "properties": {
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://', parameters('userImageStorageAccountName'), '.blob.core.chinacloudapi.cn')]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
              "properties": {
                "primary": false
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic3Name'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": "[variables('osProfile')]",
		    ////////////////////////////
        //可以通过之前的参数确定镜像位置，最好不用写死镜像路径的方式
        //因此storageProfile改为如下形式
        ////////////////////////////
        /* "storageProfile": {
                "osDisk": {
                    "image": {
                        "uri": "https://checkpointvhd.blob.core.chinacloudapi.cn/vhd-image/Check-Point-Security-Gateway-BYOL-R77.30-041.161.vhd/community-9139-e9cfd144-2a8b-4c92-9cc1-4f575c36fe81-4.vhd"
                    },
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "name": "osDisk",
                    "vhd": {
                        "uri": "[concat('http://',parameters('newStorageAccountName'), '.blob.core.chinacloudapi.cn/vhds/', parameters('vmName'), '.vhd')]"
                     }
                 }
            }*/
          "storageProfile": {
              "osDisk": {
                "name": "[concat(parameters('vmName'),'-osDisk')]",
                "osType": "[variables('osType')]",
                "caching": "ReadWrite",
                "createOption": "FromImage",
                "image": {
                  "uri": "[parameters('osDiskVhdUri')]"
                },
                "vhd": {
                  "uri": "[variables('osDiskVhdName')]"
                }
              }
            }
         }
      }
  ],
  "outputs": {
    "Gateway": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId')).IpAddress]"
    },
    "WebApp1": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressWebApp1Id')).IpAddress]"
    },
    "WebApp2": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressWebApp2Id')).IpAddress]"
    }
  }
}